<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace tutorial;


/**
 * Ahh, now onto the cool part, defining a service. Services just need a name
 * and can optionally inherit from another service using the extends keyword.
 */
interface CalculatorIf extends SharedServiceIf {
  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   * 
   * Original thrift definition:-
   * void
   *   ping();
   */
  public function ping();

  /**
   * Original thrift definition:-
   * i32
   *   add(1: i32 num1,
   *       2: i32 num2);
   */
  public function add($num1, $num2);

  /**
   * Original thrift definition:-
   * i32
   *   calculate(1: i32 logid,
   *             2: Work w)
   *   throws (1: InvalidOperation ouch);
   */
  public function calculate($logid, $w);

  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   * 
   * Original thrift definition:-
   * oneway void
   *   zip();
   */
  public function zip();
}

/**
 * Ahh, now onto the cool part, defining a service. Services just need a name
 * and can optionally inherit from another service using the extends keyword.
 */
class CalculatorClient extends SharedServiceClient implements CalculatorIf, \IThriftClient {
  public function __construct(\TProtocol $input, /*?\TProtocol*/ $output=null) {
    parent::__construct($input, $output);
  }

  public function setEventHandler(\TClientEventHandler $event_handler) {
    $this->eventHandler_ = $event_handler;
  }

  public function getEventHandler() {
    return $this->eventHandler_;
  }

  private function getsequenceid() {
    $currentseqid = $this->seqid_;
    if ($this->seqid_ >= 0x7fffffff) {
       $this->seqid_ = 0;
    } else {
       $this->seqid_++;
    }
    return $currentseqid;
  }

  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   * 
   * Original thrift definition:-
   * void
   *   ping();
   */
  public function ping()
  {
    $currentseqid = $this->send_ping();
    $this->recv_ping($currentseqid);
  }

  public function send_ping()
  {
    $currentseqid = $this->getsequenceid();
    $args = new Calculator_ping_args();
    try {
      $this->eventHandler_->preSend('ping', $args, $currentseqid);
      $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
      $compact_accel = ($this->output_ instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_compact') && \TCompactProtocolAccelerated::checkVersion(1);
      if ($bin_accel)
      {
        thrift_protocol_write_binary($this->output_, 'ping', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($compact_accel)
      {
        thrift_protocol_write_compact($this->output_, 'ping', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('ping', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('ping', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('ping', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->sendError('ping', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('ping', $args, $currentseqid);
    return $currentseqid;
  }

  public function recv_ping($expectedsequenceid = null)
  {
    try {
      $this->eventHandler_->preRecv('ping', $expectedsequenceid);
      $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
      $compact_accel = ($this->input_ instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_compact') && \TCompactProtocolAccelerated::checkVersion(1);
      if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Calculator_ping_result', $this->input_->isStrictRead());
      else if ($compact_accel) $result = thrift_protocol_read_compact($this->input_, 'Calculator_ping_result');
      else
      {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new Calculator_ping_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if (isset($expectedsequenceid) && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("ping failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('ping', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('ping', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('ping', $expectedsequenceid, $ex->result);
          return $ex->result;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('ping', $expectedsequenceid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postRecv('ping', $expectedsequenceid, null);
    return;
  }

  /**
   * Original thrift definition:-
   * i32
   *   add(1: i32 num1,
   *       2: i32 num2);
   */
  public function add($num1, $num2)
  {
    $currentseqid = $this->send_add($num1, $num2);
    return $this->recv_add($currentseqid);
  }

  public function send_add($num1, $num2)
  {
    $currentseqid = $this->getsequenceid();
    $args = new Calculator_add_args();
    $args->num1 = $num1;
    $args->num2 = $num2;
    try {
      $this->eventHandler_->preSend('add', $args, $currentseqid);
      $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
      $compact_accel = ($this->output_ instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_compact') && \TCompactProtocolAccelerated::checkVersion(1);
      if ($bin_accel)
      {
        thrift_protocol_write_binary($this->output_, 'add', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($compact_accel)
      {
        thrift_protocol_write_compact($this->output_, 'add', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('add', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('add', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('add', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->sendError('add', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('add', $args, $currentseqid);
    return $currentseqid;
  }

  public function recv_add($expectedsequenceid = null)
  {
    try {
      $this->eventHandler_->preRecv('add', $expectedsequenceid);
      $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
      $compact_accel = ($this->input_ instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_compact') && \TCompactProtocolAccelerated::checkVersion(1);
      if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Calculator_add_result', $this->input_->isStrictRead());
      else if ($compact_accel) $result = thrift_protocol_read_compact($this->input_, 'Calculator_add_result');
      else
      {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new Calculator_add_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if (isset($expectedsequenceid) && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("add failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('add', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('add', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('add', $expectedsequenceid, $ex->result);
          return $ex->result;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('add', $expectedsequenceid, $ex);
      throw $ex;
    }
    if ($result->success !== null) {
      $this->eventHandler_->postRecv('add', $expectedsequenceid, $result->success);
      return $result->success;
    }
    $x = new \TApplicationException("add failed: unknown result", \TApplicationException::MISSING_RESULT);
    $this->eventHandler_->recvError('add', $expectedsequenceid, $x);
    throw $x;
  }

  /**
   * Original thrift definition:-
   * i32
   *   calculate(1: i32 logid,
   *             2: Work w)
   *   throws (1: InvalidOperation ouch);
   */
  public function calculate($logid, $w)
  {
    $currentseqid = $this->send_calculate($logid, $w);
    return $this->recv_calculate($currentseqid);
  }

  public function send_calculate($logid, $w)
  {
    $currentseqid = $this->getsequenceid();
    $args = new Calculator_calculate_args();
    $args->logid = $logid;
    $args->w = $w;
    try {
      $this->eventHandler_->preSend('calculate', $args, $currentseqid);
      $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
      $compact_accel = ($this->output_ instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_compact') && \TCompactProtocolAccelerated::checkVersion(1);
      if ($bin_accel)
      {
        thrift_protocol_write_binary($this->output_, 'calculate', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($compact_accel)
      {
        thrift_protocol_write_compact($this->output_, 'calculate', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('calculate', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('calculate', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('calculate', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->sendError('calculate', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('calculate', $args, $currentseqid);
    return $currentseqid;
  }

  public function recv_calculate($expectedsequenceid = null)
  {
    try {
      $this->eventHandler_->preRecv('calculate', $expectedsequenceid);
      $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
      $compact_accel = ($this->input_ instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_compact') && \TCompactProtocolAccelerated::checkVersion(1);
      if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'Calculator_calculate_result', $this->input_->isStrictRead());
      else if ($compact_accel) $result = thrift_protocol_read_compact($this->input_, 'Calculator_calculate_result');
      else
      {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new Calculator_calculate_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if (isset($expectedsequenceid) && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("calculate failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('calculate', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('calculate', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('calculate', $expectedsequenceid, $ex->result);
          return $ex->result;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('calculate', $expectedsequenceid, $ex);
      throw $ex;
    }
    if ($result->success !== null) {
      $this->eventHandler_->postRecv('calculate', $expectedsequenceid, $result->success);
      return $result->success;
    }
    if ($result->ouch !== null) {
      $this->eventHandler_->recvException('calculate', $expectedsequenceid, $result->ouch);
      throw $result->ouch;
    }
    $x = new \TApplicationException("calculate failed: unknown result", \TApplicationException::MISSING_RESULT);
    $this->eventHandler_->recvError('calculate', $expectedsequenceid, $x);
    throw $x;
  }

  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   * 
   * Original thrift definition:-
   * oneway void
   *   zip();
   */
  public function zip()
  {
    $currentseqid = $this->send_zip();
  }

  public function send_zip()
  {
    $currentseqid = $this->getsequenceid();
    $args = new Calculator_zip_args();
    try {
      $this->eventHandler_->preSend('zip', $args, $currentseqid);
      $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
      $compact_accel = ($this->output_ instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_compact') && \TCompactProtocolAccelerated::checkVersion(1);
      if ($bin_accel)
      {
        thrift_protocol_write_binary($this->output_, 'zip', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), true);
      }
      else if ($compact_accel)
      {
        thrift_protocol_write_compact($this->output_, 'zip', \TMessageType::CALL, $args, $currentseqid, true);
      }
      else
      {
        $this->output_->writeMessageBegin('zip', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->onewayFlush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('zip', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('zip', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->sendError('zip', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('zip', $args, $currentseqid);
    return $currentseqid;
  }
}

class CalculatorProcessor extends SharedServiceProcessor implements \IThriftProcessor {
  protected $eventHandler_ = null;
  public function __construct(CalculatorIf $handler) {
    parent::__construct($handler);
    $this->eventHandler_ = new \TProcessorEventHandler();
  }

  public function setEventHandler(\TProcessorEventHandler $event_handler) {
    $this->eventHandler_ = $event_handler;
  }

  public function getEventHandler() {
    return $this->eventHandler_;
  }

  public function process(\TProtocol $input, \TProtocol $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $handler_ctx = $this->eventHandler_->getHandlerContext($methodname);
      $this->eventHandler_->preRead($handler_ctx, $methodname, array());
      $input->skip(\TType::STRUCT);
      $input->readMessageEnd();
      $this->eventHandler_->postRead($handler_ctx, $methodname, array());
      $x = new \TApplicationException('Function '.$fname.' not implemented.', \TApplicationException::UNKNOWN_METHOD);
      $this->eventHandler_->handlerError($handler_ctx, $methodname, $x);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_ping($seqid, \TProtocol $input, \TProtocol $output) {
    $handler_ctx = $this->eventHandler_->getHandlerContext('ping');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'ping', array());

    $bin_accel = ($input instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary_struct');
    $compact_accel = ($input instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_compact_struct') && \TCompactProtocolAccelerated::checkVersion(1);

    if ($bin_accel) $args = thrift_protocol_read_binary_struct($input, 'Calculator_ping_args');
    else if ($compact_accel) $args = thrift_protocol_read_compact_struct($input, 'Calculator_ping_args');
    else {
      $args = new Calculator_ping_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'ping', $args);
    $result = new Calculator_ping_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'ping', $args);
      $this->handler_->ping();
      $this->eventHandler_->postExec($handler_ctx, 'ping', $result);
    } catch (\Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'ping', $ex);
      $result = new \TApplicationException($ex->getMessage());
    }
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    $compact_accel = ($output instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_compact') && \TCompactProtocolAccelerated::checkVersion(1);
    $this->eventHandler_->preWrite($handler_ctx, 'ping', $result);
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'ping', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($compact_accel)
    {
      thrift_protocol_write_compact($output, 'ping', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("ping", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'ping', $result);
  }
  protected function process_add($seqid, \TProtocol $input, \TProtocol $output) {
    $handler_ctx = $this->eventHandler_->getHandlerContext('add');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'add', array());

    $bin_accel = ($input instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary_struct');
    $compact_accel = ($input instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_compact_struct') && \TCompactProtocolAccelerated::checkVersion(1);

    if ($bin_accel) $args = thrift_protocol_read_binary_struct($input, 'Calculator_add_args');
    else if ($compact_accel) $args = thrift_protocol_read_compact_struct($input, 'Calculator_add_args');
    else {
      $args = new Calculator_add_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'add', $args);
    $result = new Calculator_add_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'add', $args);
      $result->success = $this->handler_->add($args->num1, $args->num2);
      $this->eventHandler_->postExec($handler_ctx, 'add', $result);
    } catch (\Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'add', $ex);
      $result = new \TApplicationException($ex->getMessage());
    }
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    $compact_accel = ($output instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_compact') && \TCompactProtocolAccelerated::checkVersion(1);
    $this->eventHandler_->preWrite($handler_ctx, 'add', $result);
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'add', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($compact_accel)
    {
      thrift_protocol_write_compact($output, 'add', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("add", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'add', $result);
  }
  protected function process_calculate($seqid, \TProtocol $input, \TProtocol $output) {
    $handler_ctx = $this->eventHandler_->getHandlerContext('calculate');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'calculate', array());

    $bin_accel = ($input instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary_struct');
    $compact_accel = ($input instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_compact_struct') && \TCompactProtocolAccelerated::checkVersion(1);

    if ($bin_accel) $args = thrift_protocol_read_binary_struct($input, 'Calculator_calculate_args');
    else if ($compact_accel) $args = thrift_protocol_read_compact_struct($input, 'Calculator_calculate_args');
    else {
      $args = new Calculator_calculate_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'calculate', $args);
    $result = new Calculator_calculate_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'calculate', $args);
      $result->success = $this->handler_->calculate($args->logid, $args->w);
      $this->eventHandler_->postExec($handler_ctx, 'calculate', $result);
    } catch (InvalidOperation $exc0) {
      $this->eventHandler_->handlerException($handler_ctx, 'calculate', $exc0);
      $result->ouch = $exc0;
    } catch (\Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'calculate', $ex);
      $result = new \TApplicationException($ex->getMessage());
    }
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    $compact_accel = ($output instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_compact') && \TCompactProtocolAccelerated::checkVersion(1);
    $this->eventHandler_->preWrite($handler_ctx, 'calculate', $result);
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'calculate', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($compact_accel)
    {
      thrift_protocol_write_compact($output, 'calculate', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("calculate", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'calculate', $result);
  }
  protected function process_zip($seqid, \TProtocol $input, \TProtocol $output) {
    $handler_ctx = $this->eventHandler_->getHandlerContext('zip');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'zip', array());

    $bin_accel = ($input instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary_struct');
    $compact_accel = ($input instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_compact_struct') && \TCompactProtocolAccelerated::checkVersion(1);

    if ($bin_accel) $args = thrift_protocol_read_binary_struct($input, 'Calculator_zip_args');
    else if ($compact_accel) $args = thrift_protocol_read_compact_struct($input, 'Calculator_zip_args');
    else {
      $args = new Calculator_zip_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'zip', $args);
    try {
      $this->eventHandler_->preExec($handler_ctx, 'zip', $args);
      $this->handler_->zip();
    } catch (\Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'zip', $ex);
      $result = new \TApplicationException($ex->getMessage());
    }
    return;
  }
}
// HELPER FUNCTIONS AND STRUCTURES

class Calculator_ping_args implements \IThriftStruct {
  static $_TSPEC = array(
    );
  public static $_TFIELDMAP = array(
  );
  const STRUCTURAL_ID = 957977401221134810;

  public function __construct($vals=null) {
  }

  public function getName() {
    return 'Calculator_ping_args';
  }

  public static function __set_state($vals) {
    return new Calculator_ping_args();
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Calculator_ping_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Calculator_ping_result implements \IThriftStruct {
  static $_TSPEC = array(
    );
  public static $_TFIELDMAP = array(
  );
  const STRUCTURAL_ID = 957977401221134810;

  public function __construct($vals=null) {
  }

  public function getName() {
    return 'Calculator_ping_result';
  }

  public static function __set_state($vals) {
    return new Calculator_ping_result();
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Calculator_ping_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Calculator_add_args implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'num1',
      'type' => \TType::I32,
      ),
    2 => array(
      'var' => 'num2',
      'type' => \TType::I32,
      ),
    );
  public static $_TFIELDMAP = array(
    'num1' => 1,
    'num2' => 2,
  );
  const STRUCTURAL_ID = 4651426523619067008;
  public $num1 = null;
  public $num2 = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['num1'])) {
        $this->num1 = $vals['num1'];
      }
      if (isset($vals['num2'])) {
        $this->num2 = $vals['num2'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'Calculator_add_args constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Calculator_add_args';
  }

  public static function __set_state($vals) {
    return new Calculator_add_args($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->num1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->num2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Calculator_add_args');
    if ($this->num1 !== null) {
      $xfer += $output->writeFieldBegin('num1', \TType::I32, 1);
      $xfer += $output->writeI32($this->num1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num2 !== null) {
      $xfer += $output->writeFieldBegin('num2', \TType::I32, 2);
      $xfer += $output->writeI32($this->num2);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Calculator_add_result implements \IThriftStruct {
  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'type' => \TType::I32,
      ),
    );
  public static $_TFIELDMAP = array(
    'success' => 0,
  );
  const STRUCTURAL_ID = 3865318819874171525;
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'Calculator_add_result constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Calculator_add_result';
  }

  public static function __set_state($vals) {
    return new Calculator_add_result($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Calculator_add_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', \TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Calculator_calculate_args implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'logid',
      'type' => \TType::I32,
      ),
    2 => array(
      'var' => 'w',
      'type' => \TType::STRUCT,
      'class' => 'Work',
      ),
    );
  public static $_TFIELDMAP = array(
    'logid' => 1,
    'w' => 2,
  );
  const STRUCTURAL_ID = 5766363477967163730;
  public $logid = null;
  public $w = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['logid'])) {
        $this->logid = $vals['logid'];
      }
      if (isset($vals['w'])) {
        $this->w = $vals['w'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'Calculator_calculate_args constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Calculator_calculate_args';
  }

  public static function __set_state($vals) {
    return new Calculator_calculate_args($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->logid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRUCT) {
            $this->w = new Work();
            $xfer += $this->w->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Calculator_calculate_args');
    if ($this->logid !== null) {
      $xfer += $output->writeFieldBegin('logid', \TType::I32, 1);
      $xfer += $output->writeI32($this->logid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->w !== null) {
      if (!is_object($this->w)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('w', \TType::STRUCT, 2);
      $xfer += $this->w->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Calculator_calculate_result implements \IThriftStruct {
  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'type' => \TType::I32,
      ),
    1 => array(
      'var' => 'ouch',
      'type' => \TType::STRUCT,
      'class' => 'InvalidOperation',
      ),
    );
  public static $_TFIELDMAP = array(
    'success' => 0,
    'ouch' => 1,
  );
  const STRUCTURAL_ID = 3807303337455539143;
  public $success = null;
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'Calculator_calculate_result constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Calculator_calculate_result';
  }

  public static function __set_state($vals) {
    return new Calculator_calculate_result($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == \TType::STRUCT) {
            $this->ouch = new InvalidOperation();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Calculator_calculate_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', \TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', \TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Calculator_zip_args implements \IThriftStruct {
  static $_TSPEC = array(
    );
  public static $_TFIELDMAP = array(
  );
  const STRUCTURAL_ID = 957977401221134810;

  public function __construct($vals=null) {
  }

  public function getName() {
    return 'Calculator_zip_args';
  }

  public static function __set_state($vals) {
    return new Calculator_zip_args();
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Calculator_zip_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
