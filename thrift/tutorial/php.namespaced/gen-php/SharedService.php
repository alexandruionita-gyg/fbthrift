<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace tutorial;


interface SharedServiceIf {
  /**
   * Original thrift definition:-
   * SharedStruct
   *   getStruct(1: i32 key);
   */
  public function getStruct($key);
}

class SharedServiceClient implements SharedServiceIf, \IThriftClient {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct(\TProtocol $input, /*?\TProtocol*/ $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
    $this->eventHandler_ = new \TClientEventHandler();
  }

  public function setEventHandler(\TClientEventHandler $event_handler) {
    $this->eventHandler_ = $event_handler;
  }

  public function getEventHandler() {
    return $this->eventHandler_;
  }

  private function getsequenceid() {
    $currentseqid = $this->seqid_;
    if ($this->seqid_ >= 0x7fffffff) {
       $this->seqid_ = 0;
    } else {
       $this->seqid_++;
    }
    return $currentseqid;
  }

  /**
   * Original thrift definition:-
   * SharedStruct
   *   getStruct(1: i32 key);
   */
  public function getStruct($key)
  {
    $currentseqid = $this->send_getStruct($key);
    return $this->recv_getStruct($currentseqid);
  }

  public function send_getStruct($key)
  {
    $currentseqid = $this->getsequenceid();
    $args = new SharedService_getStruct_args();
    $args->key = $key;
    try {
      $this->eventHandler_->preSend('getStruct', $args, $currentseqid);
      $bin_accel = ($this->output_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
      $compact_accel = ($this->output_ instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_compact') && \TCompactProtocolAccelerated::checkVersion(1);
      if ($bin_accel)
      {
        thrift_protocol_write_binary($this->output_, 'getStruct', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($compact_accel)
      {
        thrift_protocol_write_compact($this->output_, 'getStruct', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('getStruct', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('getStruct', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('getStruct', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->sendError('getStruct', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('getStruct', $args, $currentseqid);
    return $currentseqid;
  }

  public function recv_getStruct($expectedsequenceid = null)
  {
    try {
      $this->eventHandler_->preRecv('getStruct', $expectedsequenceid);
      $bin_accel = ($this->input_ instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
      $compact_accel = ($this->input_ instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_compact') && \TCompactProtocolAccelerated::checkVersion(1);
      if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'SharedService_getStruct_result', $this->input_->isStrictRead());
      else if ($compact_accel) $result = thrift_protocol_read_compact($this->input_, 'SharedService_getStruct_result');
      else
      {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new SharedService_getStruct_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if (isset($expectedsequenceid) && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("getStruct failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('getStruct', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('getStruct', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('getStruct', $expectedsequenceid, $ex->result);
          return $ex->result;
      }
    } catch (\Exception $ex) {
      $this->eventHandler_->recvError('getStruct', $expectedsequenceid, $ex);
      throw $ex;
    }
    if ($result->success !== null) {
      $this->eventHandler_->postRecv('getStruct', $expectedsequenceid, $result->success);
      return $result->success;
    }
    $x = new \TApplicationException("getStruct failed: unknown result", \TApplicationException::MISSING_RESULT);
    $this->eventHandler_->recvError('getStruct', $expectedsequenceid, $x);
    throw $x;
  }

}

class SharedServiceProcessor implements \IThriftProcessor {
  protected $handler_ = null;
  protected $eventHandler_ = null;
  public function __construct(SharedServiceIf $handler) {
    $this->handler_ = $handler;
    $this->eventHandler_ = new \TProcessorEventHandler();
  }

  public function setEventHandler(\TProcessorEventHandler $event_handler) {
    $this->eventHandler_ = $event_handler;
  }

  public function getEventHandler() {
    return $this->eventHandler_;
  }

  public function process(\TProtocol $input, \TProtocol $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $handler_ctx = $this->eventHandler_->getHandlerContext($methodname);
      $this->eventHandler_->preRead($handler_ctx, $methodname, array());
      $input->skip(\TType::STRUCT);
      $input->readMessageEnd();
      $this->eventHandler_->postRead($handler_ctx, $methodname, array());
      $x = new \TApplicationException('Function '.$fname.' not implemented.', \TApplicationException::UNKNOWN_METHOD);
      $this->eventHandler_->handlerError($handler_ctx, $methodname, $x);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_getStruct($seqid, \TProtocol $input, \TProtocol $output) {
    $handler_ctx = $this->eventHandler_->getHandlerContext('getStruct');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'getStruct', array());

    $bin_accel = ($input instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary_struct');
    $compact_accel = ($input instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_compact_struct') && \TCompactProtocolAccelerated::checkVersion(1);

    if ($bin_accel) $args = thrift_protocol_read_binary_struct($input, 'SharedService_getStruct_args');
    else if ($compact_accel) $args = thrift_protocol_read_compact_struct($input, 'SharedService_getStruct_args');
    else {
      $args = new SharedService_getStruct_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'getStruct', $args);
    $result = new SharedService_getStruct_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'getStruct', $args);
      $result->success = $this->handler_->getStruct($args->key);
      $this->eventHandler_->postExec($handler_ctx, 'getStruct', $result);
    } catch (\Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'getStruct', $ex);
      $result = new \TApplicationException($ex->getMessage());
    }
    $bin_accel = ($output instanceof \TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    $compact_accel = ($output instanceof \TProtocol::$TCOMPACTPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_compact') && \TCompactProtocolAccelerated::checkVersion(1);
    $this->eventHandler_->preWrite($handler_ctx, 'getStruct', $result);
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getStruct', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($compact_accel)
    {
      thrift_protocol_write_compact($output, 'getStruct', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("getStruct", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'getStruct', $result);
  }
}
// HELPER FUNCTIONS AND STRUCTURES

class SharedService_getStruct_args implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'key',
      'type' => \TType::I32,
      ),
    );
  public static $_TFIELDMAP = array(
    'key' => 1,
  );
  const STRUCTURAL_ID = 3816812582444355332;
  public $key = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'SharedService_getStruct_args constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'SharedService_getStruct_args';
  }

  public static function __set_state($vals) {
    return new SharedService_getStruct_args($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SharedService_getStruct_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', \TType::I32, 1);
      $xfer += $output->writeI32($this->key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SharedService_getStruct_result implements \IThriftStruct {
  static $_TSPEC = array(
    0 => array(
      'var' => 'success',
      'type' => \TType::STRUCT,
      'class' => 'SharedStruct',
      ),
    );
  public static $_TFIELDMAP = array(
    'success' => 0,
  );
  const STRUCTURAL_ID = 3738999408636403039;
  public $success = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'SharedService_getStruct_result constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'SharedService_getStruct_result';
  }

  public static function __set_state($vals) {
    return new SharedService_getStruct_result($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == \TType::STRUCT) {
            $this->success = new SharedStruct();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SharedService_getStruct_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', \TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
