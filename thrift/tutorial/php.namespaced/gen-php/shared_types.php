<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace tutorial;


class SharedStruct implements \IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'key',
      'type' => \TType::I32,
      ),
    2 => array(
      'var' => 'value',
      'type' => \TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'key' => 1,
    'value' => 2,
  );
  const STRUCTURAL_ID = 2129760647907441233;
  public $key = null;
  public $value = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    } else if ($vals) {
      throw new \TProtocolException(
        'SharedStruct constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'SharedStruct';
  }

  public static function __set_state($vals) {
    return new SharedStruct($vals);
  }

  public function read(\TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::I32) {
            $xfer += $input->readI32($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == \TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SharedStruct');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', \TType::I32, 1);
      $xfer += $output->writeI32($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', \TType::STRING, 2);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
