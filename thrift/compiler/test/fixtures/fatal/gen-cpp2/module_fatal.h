/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "module_types.h"

#include <thrift/lib/cpp2/fatal/reflection.h>

#include <fatal/type/list.h>
#include <fatal/type/map.h>
#include <fatal/type/pair.h>
#include <fatal/type/sequence.h>

namespace test_cpp2 { namespace cpp_reflection {

namespace thrift_fatal_impl_detail {

struct test_cpp2_cpp_reflection_module__unique_strings_list {
  using field2_3 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '2', '_', '3'>;
  using field2_2 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '2', '_', '2'>;
  using enum1 = ::fatal::constant_sequence<char, 'e', 'n', 'u', 'm', '1'>;
  using enum2 = ::fatal::constant_sequence<char, 'e', 'n', 'u', 'm', '2'>;
  using enum3 = ::fatal::constant_sequence<char, 'e', 'n', 'u', 'm', '3'>;
  using us_3 = ::fatal::constant_sequence<char, 'u', 's', '_', '3'>;
  using us_2 = ::fatal::constant_sequence<char, 'u', 's', '_', '2'>;
  using field2 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '2'>;
  using field3 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '3'>;
  using field0 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '0'>;
  using field1 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '1'>;
  using field4 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '4'>;
  using field5 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '5'>;
  using fieldE = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'E'>;
  using ui_3 = ::fatal::constant_sequence<char, 'u', 'i', '_', '3'>;
  using ui_2 = ::fatal::constant_sequence<char, 'u', 'i', '_', '2'>;
  using python = ::fatal::constant_sequence<char, 'p', 'y', 't', 'h', 'o', 'n'>;
  using fieldP = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'P'>;
  using fieldQ = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'Q'>;
  using fieldJ = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'J'>;
  using fieldK = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'K'>;
  using fieldH = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'H'>;
  using fieldI = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'I'>;
  using fieldN = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'N'>;
  using fieldO = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'O'>;
  using fieldL = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'L'>;
  using fieldM = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'M'>;
  using fieldB = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'B'>;
  using fieldC = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'C'>;
  using fieldA = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'A'>;
  using fieldF = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'F'>;
  using fieldG = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'G'>;
  using fieldD = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'D'>;
  using test_py_cpp_reflection = ::fatal::constant_sequence<char, 't', 'e', 's', 't', '_', 'p', 'y', '.', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using ue_3 = ::fatal::constant_sequence<char, 'u', 'e', '_', '3'>;
  using ue_2 = ::fatal::constant_sequence<char, 'u', 'e', '_', '2'>;
  using h = ::fatal::constant_sequence<char, 'h'>;
  using field0_3 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '0', '_', '3'>;
  using field0_2 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '0', '_', '2'>;
  using l = ::fatal::constant_sequence<char, 'l'>;
  using l2 = ::fatal::constant_sequence<char, 'l', '2'>;
  using l3 = ::fatal::constant_sequence<char, 'l', '3'>;
  using test_swift_cpp_reflection = ::fatal::constant_sequence<char, 't', 'e', 's', 't', '_', 's', 'w', 'i', 'f', 't', '.', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using l1 = ::fatal::constant_sequence<char, 'l', '1'>;
  using x = ::fatal::constant_sequence<char, 'x'>;
  using unionA = ::fatal::constant_sequence<char, 'u', 'n', 'i', 'o', 'n', 'A'>;
  using cpp2 = ::fatal::constant_sequence<char, 'c', 'p', 'p', '2'>;
  using j1 = ::fatal::constant_sequence<char, 'j', '1'>;
  using j2 = ::fatal::constant_sequence<char, 'j', '2'>;
  using j3 = ::fatal::constant_sequence<char, 'j', '3'>;
  using fieldR = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', 'R'>;
  using n = ::fatal::constant_sequence<char, 'n'>;
  using Type = ::fatal::constant_sequence<char, 'T', 'y', 'p', 'e'>;
  using test_java_cpp_reflection = ::fatal::constant_sequence<char, 't', 'e', 's', 't', '_', 'j', 'a', 'v', 'a', '.', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using methodF = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'F'>;
  using methodD = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'D'>;
  using methodE = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'E'>;
  using methodB = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'B'>;
  using methodC = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'C'>;
  using methodA = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', 'A'>;
  using o3 = ::fatal::constant_sequence<char, 'o', '3'>;
  using o2 = ::fatal::constant_sequence<char, 'o', '2'>;
  using o1 = ::fatal::constant_sequence<char, 'o', '1'>;
  using test_cpp1__cpp_reflection = ::fatal::constant_sequence<char, 't', 'e', 's', 't', '_', 'c', 'p', 'p', '1', ':', ':', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using method6 = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '6'>;
  using method4 = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '4'>;
  using method5 = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '5'>;
  using method2 = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '2'>;
  using method3 = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '3'>;
  using method1 = ::fatal::constant_sequence<char, 'm', 'e', 't', 'h', 'o', 'd', '1'>;
  using test_php_cpp_reflection = ::fatal::constant_sequence<char, 't', 'e', 's', 't', '_', 'p', 'h', 'p', '_', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using one_here = ::fatal::constant_sequence<char, 'o', 'n', 'e', '.', 'h', 'e', 'r', 'e'>;
  using _now_with_an_underscore = ::fatal::constant_sequence<char, '_', 'n', 'o', 'w', '.', 'w', 'i', 't', 'h', '.', 'a', 'n', '.', 'u', 'n', 'd', 'e', 'r', 's', 'c', 'o', 'r', 'e'>;
  using c = ::fatal::constant_sequence<char, 'c'>;
  using g = ::fatal::constant_sequence<char, 'g'>;
  using k = ::fatal::constant_sequence<char, 'k'>;
  using java_swift = ::fatal::constant_sequence<char, 'j', 'a', 'v', 'a', '.', 's', 'w', 'i', 'f', 't'>;
  using union1 = ::fatal::constant_sequence<char, 'u', 'n', 'i', 'o', 'n', '1'>;
  using union3 = ::fatal::constant_sequence<char, 'u', 'n', 'i', 'o', 'n', '3'>;
  using union2 = ::fatal::constant_sequence<char, 'u', 'n', 'i', 'o', 'n', '2'>;
  using d = ::fatal::constant_sequence<char, 'd'>;
  using test_cpp2__cpp_reflection = ::fatal::constant_sequence<char, 't', 'e', 's', 't', '_', 'c', 'p', 'p', '2', ':', ':', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using struct2 = ::fatal::constant_sequence<char, 's', 't', 'r', 'u', 'c', 't', '2'>;
  using struct3 = ::fatal::constant_sequence<char, 's', 't', 'r', 'u', 'c', 't', '3'>;
  using struct1 = ::fatal::constant_sequence<char, 's', 't', 'r', 'u', 'c', 't', '1'>;
  using java = ::fatal::constant_sequence<char, 'j', 'a', 'v', 'a'>;
  using another_there = ::fatal::constant_sequence<char, 'a', 'n', 'o', 't', 'h', 'e', 'r', '.', 't', 'h', 'e', 'r', 'e'>;
  using m1 = ::fatal::constant_sequence<char, 'm', '1'>;
  using m3 = ::fatal::constant_sequence<char, 'm', '3'>;
  using m2 = ::fatal::constant_sequence<char, 'm', '2'>;
  using b = ::fatal::constant_sequence<char, 'b'>;
  using some_annotation = ::fatal::constant_sequence<char, 's', 'o', 'm', 'e', '.', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using f = ::fatal::constant_sequence<char, 'f'>;
  using j = ::fatal::constant_sequence<char, 'j'>;
  using structB = ::fatal::constant_sequence<char, 's', 't', 'r', 'u', 'c', 't', 'B'>;
  using structC = ::fatal::constant_sequence<char, 's', 't', 'r', 'u', 'c', 't', 'C'>;
  using us = ::fatal::constant_sequence<char, 'u', 's'>;
  using structA = ::fatal::constant_sequence<char, 's', 't', 'r', 'u', 'c', 't', 'A'>;
  using test_d_cpp_reflection = ::fatal::constant_sequence<char, 't', 'e', 's', 't', '_', 'd', '.', 'c', 'p', 'p', '_', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using ui = ::fatal::constant_sequence<char, 'u', 'i'>;
  using ue = ::fatal::constant_sequence<char, 'u', 'e'>;
  using ud = ::fatal::constant_sequence<char, 'u', 'd'>;
  using z = ::fatal::constant_sequence<char, 'z'>;
  using service3 = ::fatal::constant_sequence<char, 's', 'e', 'r', 'v', 'i', 'c', 'e', '3'>;
  using service2 = ::fatal::constant_sequence<char, 's', 'e', 'r', 'v', 'i', 'c', 'e', '2'>;
  using service1 = ::fatal::constant_sequence<char, 's', 'e', 'r', 'v', 'i', 'c', 'e', '1'>;
  using constant1 = ::fatal::constant_sequence<char, 'c', 'o', 'n', 's', 't', 'a', 'n', 't', '1'>;
  using duplicate_id_annotation_2 = ::fatal::constant_sequence<char, 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', '_', 'i', 'd', '_', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', '2'>;
  using duplicate_id_annotation_1 = ::fatal::constant_sequence<char, 'd', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', '_', 'i', 'd', '_', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', '_', '1'>;
  using constant2 = ::fatal::constant_sequence<char, 'c', 'o', 'n', 's', 't', 'a', 'n', 't', '2'>;
  using some_other_annotation = ::fatal::constant_sequence<char, 's', 'o', 'm', 'e', '.', 'o', 't', 'h', 'e', 'r', '.', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using s = ::fatal::constant_sequence<char, 's'>;
  using k3 = ::fatal::constant_sequence<char, 'k', '3'>;
  using k2 = ::fatal::constant_sequence<char, 'k', '2'>;
  using k1 = ::fatal::constant_sequence<char, 'k', '1'>;
  using field1_3 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '1', '_', '3'>;
  using constant3 = ::fatal::constant_sequence<char, 'c', 'o', 'n', 's', 't', 'a', 'n', 't', '3'>;
  using field1_2 = ::fatal::constant_sequence<char, 'f', 'i', 'e', 'l', 'd', '1', '_', '2'>;
  using another_annotation = ::fatal::constant_sequence<char, 'a', 'n', 'o', 't', 'h', 'e', 'r', '.', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using sample_annotation = ::fatal::constant_sequence<char, 's', 'a', 'm', 'p', 'l', 'e', '.', 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n'>;
  using y = ::fatal::constant_sequence<char, 'y'>;
  using php = ::fatal::constant_sequence<char, 'p', 'h', 'p'>;
  using a = ::fatal::constant_sequence<char, 'a'>;
  using e = ::fatal::constant_sequence<char, 'e'>;
  using i = ::fatal::constant_sequence<char, 'i'>;
  using m = ::fatal::constant_sequence<char, 'm'>;
  using yet_another = ::fatal::constant_sequence<char, 'y', 'e', 't', '.', 'a', 'n', 'o', 't', 'h', 'e', 'r'>;
  using cpp = ::fatal::constant_sequence<char, 'c', 'p', 'p'>;
  using n1 = ::fatal::constant_sequence<char, 'n', '1'>;
  using n2 = ::fatal::constant_sequence<char, 'n', '2'>;
  using n3 = ::fatal::constant_sequence<char, 'n', '3'>;
  using ud_2 = ::fatal::constant_sequence<char, 'u', 'd', '_', '2'>;
  using ud_3 = ::fatal::constant_sequence<char, 'u', 'd', '_', '3'>;
};

} // thrift_fatal_impl_detail
class module_tags {
  struct test_cpp2_cpp_reflection_module__unique_languages_list {
    using cpp = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::cpp;
    using cpp2 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::cpp2;
    using d = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::d;
    using java = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::java;
    using java_swift = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::java_swift;
    using php = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::php;
    using python = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::python;
  };

  struct test_cpp2_cpp_reflection_module__unique_enums_list {
    using enum1 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::enum1;
    using enum2 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::enum2;
    using enum3 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::enum3;
  };

  struct test_cpp2_cpp_reflection_module__unique_unions_list {
    using union1 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::union1;
    using union2 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::union2;
    using union3 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::union3;
    using unionA = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::unionA;
  };

  struct test_cpp2_cpp_reflection_module__unique_structs_list {
    using structA = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::structA;
    using structB = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::structB;
    using structC = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::structC;
    using struct1 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::struct1;
    using struct2 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::struct2;
    using struct3 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::struct3;
  };

  struct test_cpp2_cpp_reflection_module__unique_constants_list {
    using constant1 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::constant1;
    using constant2 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::constant2;
    using constant3 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::constant3;
  };

  struct test_cpp2_cpp_reflection_module__unique_services_list {
    using service1 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::service1;
    using service2 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::service2;
    using service3 = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::service3;
  };

public:
  struct module {};

  using languages = test_cpp2_cpp_reflection_module__unique_languages_list;
  using enums = test_cpp2_cpp_reflection_module__unique_enums_list;
  using unions = test_cpp2_cpp_reflection_module__unique_unions_list;
  using structs = test_cpp2_cpp_reflection_module__unique_structs_list;
  using constants = test_cpp2_cpp_reflection_module__unique_constants_list;
  using services = test_cpp2_cpp_reflection_module__unique_services_list;

  using strings = thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list;
};

THRIFT_REGISTER_REFLECTION_METADATA(
  module_tags::module,
  // languages
  ::fatal::type_map<
    ::fatal::type_pair<thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::cpp, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::test_cpp1__cpp_reflection>,
    ::fatal::type_pair<thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::cpp2, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::test_cpp2__cpp_reflection>,
    ::fatal::type_pair<thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::d, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::test_d_cpp_reflection>,
    ::fatal::type_pair<thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::java, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::test_java_cpp_reflection>,
    ::fatal::type_pair<thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::java_swift, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::test_swift_cpp_reflection>,
    ::fatal::type_pair<thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::php, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::test_php_cpp_reflection>,
    ::fatal::type_pair<thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::python, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::test_py_cpp_reflection>
  >,
  // enums
  ::fatal::type_map<
    ::fatal::type_pair<enum1, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::enum1>,
    ::fatal::type_pair<enum2, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::enum2>,
    ::fatal::type_pair<enum3, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::enum3>
  >,
  // unions
  ::fatal::type_map<
    ::fatal::type_pair<union1, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::union1>,
    ::fatal::type_pair<union2, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::union2>,
    ::fatal::type_pair<union3, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::union3>,
    ::fatal::type_pair<unionA, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::unionA>
  >,
  // structs
  ::fatal::type_map<
    ::fatal::type_pair<structA, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::structA>,
    ::fatal::type_pair<structB, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::structB>,
    ::fatal::type_pair<structC, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::structC>,
    ::fatal::type_pair<struct1, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::struct1>,
    ::fatal::type_pair<struct2, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::struct2>,
    ::fatal::type_pair<struct3, thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::struct3>
  >,
  // constants
  ::fatal::type_list<
    thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::constant1,
    thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::constant2,
    thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::constant3
  >,
  // services
  ::fatal::type_list<
    thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::service1,
    thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::service2,
    thrift_fatal_impl_detail::test_cpp2_cpp_reflection_module__unique_strings_list::service3
  >
);

}} // test_cpp2::cpp_reflection