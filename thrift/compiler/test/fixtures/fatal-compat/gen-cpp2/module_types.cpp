/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "module_types.h"

#include "module_types.tcc"

#include <algorithm>

namespace test_cpp2 { namespace cpp_reflection {

template uint32_t union1_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, union1*);
template uint32_t union1_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const union1*);
template uint32_t union1_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const union1*);
template uint32_t union1_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const union1*);
template uint32_t union1_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, union1*);
template uint32_t union1_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const union1*);
template uint32_t union1_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const union1*);
template uint32_t union1_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const union1*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template uint32_t union2_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, union2*);
template uint32_t union2_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const union2*);
template uint32_t union2_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const union2*);
template uint32_t union2_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const union2*);
template uint32_t union2_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, union2*);
template uint32_t union2_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const union2*);
template uint32_t union2_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const union2*);
template uint32_t union2_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const union2*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template uint32_t union3_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, union3*);
template uint32_t union3_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const union3*);
template uint32_t union3_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const union3*);
template uint32_t union3_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const union3*);
template uint32_t union3_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, union3*);
template uint32_t union3_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const union3*);
template uint32_t union3_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const union3*);
template uint32_t union3_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const union3*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template uint32_t structA_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, structA*);
template uint32_t structA_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const structA*);
template uint32_t structA_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const structA*);
template uint32_t structA_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const structA*);
template uint32_t structA_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, structA*);
template uint32_t structA_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const structA*);
template uint32_t structA_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const structA*);
template uint32_t structA_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const structA*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template uint32_t unionA_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, unionA*);
template uint32_t unionA_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const unionA*);
template uint32_t unionA_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const unionA*);
template uint32_t unionA_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const unionA*);
template uint32_t unionA_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, unionA*);
template uint32_t unionA_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const unionA*);
template uint32_t unionA_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const unionA*);
template uint32_t unionA_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const unionA*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template uint32_t structB_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, structB*);
template uint32_t structB_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const structB*);
template uint32_t structB_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const structB*);
template uint32_t structB_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const structB*);
template uint32_t structB_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, structB*);
template uint32_t structB_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const structB*);
template uint32_t structB_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const structB*);
template uint32_t structB_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const structB*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template uint32_t structC_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, structC*);
template uint32_t structC_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const structC*);
template uint32_t structC_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const structC*);
template uint32_t structC_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const structC*);
template uint32_t structC_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, structC*);
template uint32_t structC_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const structC*);
template uint32_t structC_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const structC*);
template uint32_t structC_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const structC*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template uint32_t struct1_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, struct1*);
template uint32_t struct1_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const struct1*);
template uint32_t struct1_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const struct1*);
template uint32_t struct1_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const struct1*);
template uint32_t struct1_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, struct1*);
template uint32_t struct1_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const struct1*);
template uint32_t struct1_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const struct1*);
template uint32_t struct1_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const struct1*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template uint32_t struct2_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, struct2*);
template uint32_t struct2_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const struct2*);
template uint32_t struct2_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const struct2*);
template uint32_t struct2_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const struct2*);
template uint32_t struct2_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, struct2*);
template uint32_t struct2_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const struct2*);
template uint32_t struct2_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const struct2*);
template uint32_t struct2_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const struct2*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template uint32_t struct3_read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*, struct3*);
template uint32_t struct3_write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const struct3*);
template uint32_t struct3_serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const struct3*);
template uint32_t struct3_serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*, const struct3*);
template uint32_t struct3_read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*, struct3*);
template uint32_t struct3_write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const struct3*);
template uint32_t struct3_serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const struct3*);
template uint32_t struct3_serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*, const struct3*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection